// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  username      String          @unique
  password      String
  //
  active        Boolean         @default(false)
  deleted       Boolean         @default(false)
  //
  phone         String?         @db.VarChar(15)
  rg            String?         @db.VarChar(10)
  cpf           String?         @db.VarChar(11)
  notes         String?
  initial_date  DateTime?
  //
  cep           String?         @db.VarChar(8)
  state         String?         @db.VarChar(2)
  city          String?         @db.VarChar(30)
  neighborhood  String?         @db.VarChar(50)
  address       String?         @db.VarChar(50)
  complement    String?         @db.VarChar(50)
  //
  roleId        String
  role          Role            @relation(fields: [roleId], references: [id])
  //
  salesTeamId   String?
  salesTeam     SalesTeam?      @relation(fields: [salesTeamId], references: [id])
  //
  created_at    DateTime        @default(now())
  updated_at    DateTime?
  RefreshToken  RefreshToken[]
  Sale          Sale[]
  LogisticInfos LogisticInfos[]

  @@map("users")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int
  user      User   @relation(fields: [userId], references: [id])
  userId    String

  @@map("refresh_token")
}

model Role {
  id          String   @id @default(uuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  User        User[]

  @@map("roles")
}

model Product {
  id                                     String                                   @id @default(uuid())
  name                                   String
  description                            String?
  notes                                  String?
  active                                 Boolean                                  @default(false)
  deleted                                Boolean                                  @default(false)
  amount                                 Float
  supply_quantity_notice                 Int?
  created_at                             DateTime                                 @default(now())
  updated_at                             DateTime?
  //
  SaleProducts                           SaleProducts[]
  DistributionCenterProductsMovement     DistributionCenterProductsMovement[]
  DistributionCenterSupplyQuantityNotice DistributionCenterSupplyQuantityNotice[]

  @@map("products")
}

model Media {
  id          String    @id @default(uuid())
  name        String
  description String?
  notes       String?
  active      Boolean   @default(false)
  deleted     Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  Sale        Sale[]

  @@map("medias")
}

model SalesTeam {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(100)
  notes      String?
  deleted    Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime?
  User       User[]
  Sale       Sale[]

  @@map("sales_team")
}

model PaymentType {
  id           String         @id @default(uuid())
  name         String
  notes        String?
  created_at   DateTime       @default(now())
  SalePayments SalePayments[]

  @@map("payments_type")
}

model SalePayments {
  id                String      @id @default(uuid())
  //
  id_sale           String
  sale              Sale        @relation(fields: [id_sale], references: [id])
  //
  id_payment_type   String
  payment_type      PaymentType @relation(fields: [id_payment_type], references: [id])
  //
  amount            Float
  card_installments Int?
  paid              Boolean     @default(false)
  created_at        DateTime    @default(now())

  @@map("sales_payments")
}

model DeliveryType {
  id            String          @id @default(uuid())
  name          String
  notes         String?
  created_at    DateTime        @default(now())
  LogisticInfos LogisticInfos[]

  @@map("delivery_type")
}

model Sale {
  id             String          @id @default(uuid())
  number         Int             @default(autoincrement())
  name           String
  phone          String
  rg             String?
  cpf            String?
  email          String?
  //
  cep            String?
  state          String?
  city           String?
  neighborhood   String?
  address        String?
  complement     String?
  //
  sales_quantity Int
  //
  media_id       String
  media          Media           @relation(fields: [media_id], references: [id])
  //
  id_user        String
  user           User            @relation(fields: [id_user], references: [id])
  //
  id_sales_team  String?
  sales_team     SalesTeam?      @relation(fields: [id_sales_team], references: [id])
  //
  discounts      Float           @default(0)
  notes          String?
  SaleProducts   SaleProducts[]
  //
  created_at     DateTime        @default(now())
  updated_at     DateTime?
  LogisticInfos  LogisticInfos[]
  SalePayments   SalePayments[]

  @@map("sales")
}

model SaleProducts {
  id         String   @id @default(uuid())
  unit_value Float
  //
  id_product String
  product    Product  @relation(fields: [id_product], references: [id])
  //
  id_sale    String
  sale       Sale     @relation(fields: [id_sale], references: [id])
  //
  quantity   Int
  created_at DateTime @default(now())

  @@map("sales_products")
}

model SaleStatus {
  id            String          @id @default(uuid())
  status        String
  color         String?
  order         Int
  LogisticInfos LogisticInfos[]

  @@map("sale_status")
}

model MotoBoy {
  id                 String               @id @default(uuid())
  name               String
  phone              String?
  active             Boolean              @default(false)
  deleted            Boolean              @default(false)
  notes              String?
  created_at         DateTime             @default(now())
  LogisticInfos      LogisticInfos[]
  DistributionCenter DistributionCenter[]

  @@map("motoboy")
}

model LogisticInfos {
  id               String        @id @default(uuid())
  //
  id_user          String
  user             User          @relation(fields: [id_user], references: [id])
  //
  id_sale_status   String
  sale_status      SaleStatus    @relation(fields: [id_sale_status], references: [id])
  //
  delivery_value   Float         @default(0)
  id_delivery_type String?
  delivery_type    DeliveryType? @relation(fields: [id_delivery_type], references: [id])
  delivery_date    DateTime?     @default(now())
  tracking_code    String?
  //
  id_motoboy       String?
  motoboy          MotoBoy?      @relation(fields: [id_motoboy], references: [id])
  //
  id_sale          String
  sale             Sale          @relation(fields: [id_sale], references: [id])
  //
  current          Boolean       @default(true)
  notes            String?
  created_at       DateTime      @default(now())

  @@map("logistic_infos")
}

model DistributionCenter {
  id                                     String                                   @id @default(uuid())
  name                                   String
  //
  id_motoboy                             String?
  motoboy                                MotoBoy?                                 @relation(fields: [id_motoboy], references: [id])
  //
  deleted                                Boolean                                  @default(false)
  created_at                             DateTime                                 @default(now())
  //
  DistributionCenterMovement             DistributionCenterMovement[]
  RelToDistributionCenterMovement        DistributionCenterMovement[]             @relation("RelToDistributionCenter")
  DistributionCenterSupplyQuantityNotice DistributionCenterSupplyQuantityNotice[]

  @@map("distribution_centers")
}

enum Operation {
  IN
  OUT
  TRANSFER_IN
  TRANSFER_OUT
}

model DistributionCenterMovement {
  id                                 String                               @id @default(uuid())
  operation                          Operation
  //
  id_distribution_center             String
  distribution_center                DistributionCenter                   @relation(fields: [id_distribution_center], references: [id])
  //
  id_distribution_center_rel         String?
  distribution_center_rel            DistributionCenter?                  @relation(name: "RelToDistributionCenter", fields: [id_distribution_center_rel], references: [id])
  //
  created_at                         DateTime                             @default(now())
  DistributionCenterProductsMovement DistributionCenterProductsMovement[]

  @@map("distribution_center_movements")
}

model DistributionCenterProductsMovement {
  id                              String                      @id @default(uuid())
  quantity                        Int
  //
  id_product                      String
  product                         Product                     @relation(fields: [id_product], references: [id])
  //
  id_distribution_center_movement String
  distribution_center_movement    DistributionCenterMovement? @relation(fields: [id_distribution_center_movement], references: [id])

  @@map("distribution_center__products_movement")
}

model DistributionCenterSupplyQuantityNotice {
  id                     String             @id @default(uuid())
  quantity               Int
  //
  id_product             String
  product                Product            @relation(fields: [id_product], references: [id])
  //
  id_distribution_center String
  distribution_center    DistributionCenter @relation(fields: [id_distribution_center], references: [id])
  //
  created_at             DateTime           @default(now())

  @@map("distribution_center_supply_quantity_notice")
}
